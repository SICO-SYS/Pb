// Code generated by protoc-gen-go.
// source: N.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OrchestrationCreateCall struct {
	Hookid  string   `protobuf:"bytes,1,opt,name=hookid" json:"hookid,omitempty"`
	Project string   `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	Key     string   `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Value   string   `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	Belong  string   `protobuf:"bytes,5,opt,name=belong" json:"belong,omitempty"`
	Task    []string `protobuf:"bytes,6,rep,name=task" json:"task,omitempty"`
}

func (m *OrchestrationCreateCall) Reset()                    { *m = OrchestrationCreateCall{} }
func (m *OrchestrationCreateCall) String() string            { return proto.CompactTextString(m) }
func (*OrchestrationCreateCall) ProtoMessage()               {}
func (*OrchestrationCreateCall) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *OrchestrationCreateCall) GetHookid() string {
	if m != nil {
		return m.Hookid
	}
	return ""
}

func (m *OrchestrationCreateCall) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *OrchestrationCreateCall) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *OrchestrationCreateCall) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *OrchestrationCreateCall) GetBelong() string {
	if m != nil {
		return m.Belong
	}
	return ""
}

func (m *OrchestrationCreateCall) GetTask() []string {
	if m != nil {
		return m.Task
	}
	return nil
}

type OrchestrationCreateBack struct {
	Code int64 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
}

func (m *OrchestrationCreateBack) Reset()                    { *m = OrchestrationCreateBack{} }
func (m *OrchestrationCreateBack) String() string            { return proto.CompactTextString(m) }
func (*OrchestrationCreateBack) ProtoMessage()               {}
func (*OrchestrationCreateBack) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *OrchestrationCreateBack) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type OrchestrationCheckCall struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Hookid string `protobuf:"bytes,2,opt,name=hookid" json:"hookid,omitempty"`
	Type   string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Params []byte `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *OrchestrationCheckCall) Reset()                    { *m = OrchestrationCheckCall{} }
func (m *OrchestrationCheckCall) String() string            { return proto.CompactTextString(m) }
func (*OrchestrationCheckCall) ProtoMessage()               {}
func (*OrchestrationCheckCall) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *OrchestrationCheckCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrchestrationCheckCall) GetHookid() string {
	if m != nil {
		return m.Hookid
	}
	return ""
}

func (m *OrchestrationCheckCall) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *OrchestrationCheckCall) GetParams() []byte {
	if m != nil {
		return m.Params
	}
	return nil
}

type OrchestrationCheckBack struct {
	Code int64    `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Task []string `protobuf:"bytes,2,rep,name=task" json:"task,omitempty"`
}

func (m *OrchestrationCheckBack) Reset()                    { *m = OrchestrationCheckBack{} }
func (m *OrchestrationCheckBack) String() string            { return proto.CompactTextString(m) }
func (*OrchestrationCheckBack) ProtoMessage()               {}
func (*OrchestrationCheckBack) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *OrchestrationCheckBack) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *OrchestrationCheckBack) GetTask() []string {
	if m != nil {
		return m.Task
	}
	return nil
}

func init() {
	proto.RegisterType((*OrchestrationCreateCall)(nil), "pb.OrchestrationCreateCall")
	proto.RegisterType((*OrchestrationCreateBack)(nil), "pb.OrchestrationCreateBack")
	proto.RegisterType((*OrchestrationCheckCall)(nil), "pb.OrchestrationCheckCall")
	proto.RegisterType((*OrchestrationCheckBack)(nil), "pb.OrchestrationCheckBack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OrchestrationService service

type OrchestrationServiceClient interface {
	CreateRPC(ctx context.Context, in *OrchestrationCreateCall, opts ...grpc.CallOption) (*OrchestrationCreateBack, error)
	CheckRPC(ctx context.Context, in *OrchestrationCheckCall, opts ...grpc.CallOption) (*OrchestrationCheckBack, error)
}

type orchestrationServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrchestrationServiceClient(cc *grpc.ClientConn) OrchestrationServiceClient {
	return &orchestrationServiceClient{cc}
}

func (c *orchestrationServiceClient) CreateRPC(ctx context.Context, in *OrchestrationCreateCall, opts ...grpc.CallOption) (*OrchestrationCreateBack, error) {
	out := new(OrchestrationCreateBack)
	err := grpc.Invoke(ctx, "/pb.OrchestrationService/CreateRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationServiceClient) CheckRPC(ctx context.Context, in *OrchestrationCheckCall, opts ...grpc.CallOption) (*OrchestrationCheckBack, error) {
	out := new(OrchestrationCheckBack)
	err := grpc.Invoke(ctx, "/pb.OrchestrationService/CheckRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrchestrationService service

type OrchestrationServiceServer interface {
	CreateRPC(context.Context, *OrchestrationCreateCall) (*OrchestrationCreateBack, error)
	CheckRPC(context.Context, *OrchestrationCheckCall) (*OrchestrationCheckBack, error)
}

func RegisterOrchestrationServiceServer(s *grpc.Server, srv OrchestrationServiceServer) {
	s.RegisterService(&_OrchestrationService_serviceDesc, srv)
}

func _OrchestrationService_CreateRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrchestrationCreateCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).CreateRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrchestrationService/CreateRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).CreateRPC(ctx, req.(*OrchestrationCreateCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestrationService_CheckRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrchestrationCheckCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).CheckRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrchestrationService/CheckRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).CheckRPC(ctx, req.(*OrchestrationCheckCall))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrchestrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OrchestrationService",
	HandlerType: (*OrchestrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRPC",
			Handler:    _OrchestrationService_CreateRPC_Handler,
		},
		{
			MethodName: "CheckRPC",
			Handler:    _OrchestrationService_CheckRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "N.proto",
}

func init() { proto.RegisterFile("N.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x4e, 0x83, 0x40,
	0x10, 0xc6, 0x65, 0xe9, 0x1f, 0x3b, 0x31, 0xc6, 0x6c, 0x9a, 0xba, 0xa9, 0x97, 0x86, 0x53, 0x2f,
	0x72, 0xd0, 0x17, 0x30, 0x62, 0xe2, 0x4d, 0x0d, 0x3e, 0xc1, 0xb2, 0x4c, 0x04, 0xc1, 0xee, 0x66,
	0x59, 0x9b, 0xf4, 0x69, 0x3c, 0xf9, 0x9e, 0x66, 0x07, 0x5a, 0x25, 0x96, 0xdb, 0x7c, 0x33, 0x5f,
	0x3e, 0xbe, 0x1f, 0x00, 0xd3, 0xa7, 0xd8, 0x58, 0xed, 0x34, 0x67, 0x26, 0x8b, 0xbe, 0x02, 0xb8,
	0x7c, 0xb6, 0xaa, 0xc0, 0xc6, 0x59, 0xe9, 0x4a, 0xbd, 0x49, 0x2c, 0x4a, 0x87, 0x89, 0xac, 0x6b,
	0xbe, 0x80, 0x49, 0xa1, 0x75, 0x55, 0xe6, 0x22, 0x58, 0x05, 0xeb, 0x59, 0xda, 0x29, 0x2e, 0x60,
	0x6a, 0xac, 0x7e, 0x47, 0xe5, 0x04, 0xa3, 0xc3, 0x5e, 0xf2, 0x0b, 0x08, 0x2b, 0xdc, 0x89, 0x90,
	0xb6, 0x7e, 0xe4, 0x73, 0x18, 0x6f, 0x65, 0xfd, 0x89, 0x62, 0x44, 0xbb, 0x56, 0xf8, 0xe4, 0x0c,
	0x6b, 0xbd, 0x79, 0x13, 0xe3, 0x36, 0xb9, 0x55, 0x9c, 0xc3, 0xc8, 0xc9, 0xa6, 0x12, 0x93, 0x55,
	0xb8, 0x9e, 0xa5, 0x34, 0x47, 0xd7, 0x47, 0x0b, 0xde, 0x4b, 0x55, 0x79, 0xbb, 0xd2, 0x39, 0x52,
	0xbd, 0x30, 0xa5, 0x39, 0xaa, 0x61, 0xd1, 0xb7, 0x17, 0xa8, 0x2a, 0xc2, 0x39, 0x07, 0x76, 0x40,
	0x61, 0x65, 0xfe, 0x07, 0x8f, 0xf5, 0xf0, 0x7c, 0x89, 0x9d, 0xc1, 0x8e, 0x82, 0x66, 0xef, 0x35,
	0xd2, 0xca, 0x8f, 0x86, 0x38, 0xce, 0xd2, 0x4e, 0x45, 0x77, 0xc7, 0x9e, 0x36, 0xd4, 0xed, 0x80,
	0xc7, 0x7e, 0xf1, 0x6e, 0xbe, 0x03, 0x98, 0xf7, 0x22, 0x5e, 0xd1, 0x6e, 0x4b, 0x85, 0xfc, 0x11,
	0x66, 0x2d, 0x6a, 0xfa, 0x92, 0xf0, 0xab, 0xd8, 0x64, 0xf1, 0xc0, 0x77, 0x5a, 0x0e, 0x1d, 0x7d,
	0x8f, 0xe8, 0x84, 0x3f, 0xc0, 0x29, 0xd5, 0xf2, 0x39, 0xcb, 0xff, 0xd6, 0xfd, 0xfb, 0x59, 0x0e,
	0xdc, 0xda, 0x94, 0x6c, 0x42, 0xff, 0xcc, 0xed, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x13, 0x24,
	0x14, 0x94, 0x3e, 0x02, 0x00, 0x00,
}
