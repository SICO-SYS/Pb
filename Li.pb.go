// Code generated by protoc-gen-go.
// source: Li.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CloudAPICall struct {
	Bsns     string            `protobuf:"bytes,1,opt,name=bsns" json:"bsns,omitempty"`
	Action   string            `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	Region   string            `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
	CloudId  string            `protobuf:"bytes,4,opt,name=cloudId" json:"cloudId,omitempty"`
	CloudKey string            `protobuf:"bytes,5,opt,name=cloudKey" json:"cloudKey,omitempty"`
	Id       string            `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
	Params   map[string]string `protobuf:"bytes,7,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CloudAPICall) Reset()                    { *m = CloudAPICall{} }
func (m *CloudAPICall) String() string            { return proto.CompactTextString(m) }
func (*CloudAPICall) ProtoMessage()               {}
func (*CloudAPICall) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CloudAPICall) GetBsns() string {
	if m != nil {
		return m.Bsns
	}
	return ""
}

func (m *CloudAPICall) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *CloudAPICall) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CloudAPICall) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *CloudAPICall) GetCloudKey() string {
	if m != nil {
		return m.CloudKey
	}
	return ""
}

func (m *CloudAPICall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CloudAPICall) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type CloudAPIBack struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CloudAPIBack) Reset()                    { *m = CloudAPIBack{} }
func (m *CloudAPIBack) String() string            { return proto.CompactTextString(m) }
func (*CloudAPIBack) ProtoMessage()               {}
func (*CloudAPIBack) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CloudAPIBack) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CloudAPIBack) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CloudAPIBack) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CloudAPICall)(nil), "pb.CloudAPICall")
	proto.RegisterType((*CloudAPIBack)(nil), "pb.CloudAPIBack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudService service

type CloudServiceClient interface {
	QcloudRPC(ctx context.Context, in *CloudAPICall, opts ...grpc.CallOption) (*CloudAPIBack, error)
}

type cloudServiceClient struct {
	cc *grpc.ClientConn
}

func NewCloudServiceClient(cc *grpc.ClientConn) CloudServiceClient {
	return &cloudServiceClient{cc}
}

func (c *cloudServiceClient) QcloudRPC(ctx context.Context, in *CloudAPICall, opts ...grpc.CallOption) (*CloudAPIBack, error) {
	out := new(CloudAPIBack)
	err := grpc.Invoke(ctx, "/pb.CloudService/qcloudRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudService service

type CloudServiceServer interface {
	QcloudRPC(context.Context, *CloudAPICall) (*CloudAPIBack, error)
}

func RegisterCloudServiceServer(s *grpc.Server, srv CloudServiceServer) {
	s.RegisterService(&_CloudService_serviceDesc, srv)
}

func _CloudService_QcloudRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAPICall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).QcloudRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudService/QcloudRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).QcloudRPC(ctx, req.(*CloudAPICall))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CloudService",
	HandlerType: (*CloudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "qcloudRPC",
			Handler:    _CloudService_QcloudRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Li.proto",
}

func init() { proto.RegisterFile("Li.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x4e, 0xb3, 0x40,
	0x14, 0xc5, 0x3f, 0x86, 0x42, 0xdb, 0xdb, 0xe6, 0x4b, 0x73, 0x63, 0xcc, 0x84, 0xb8, 0x68, 0x58,
	0x75, 0x45, 0x62, 0x75, 0xa1, 0xee, 0x2a, 0x31, 0xb1, 0xd1, 0x05, 0xc1, 0x27, 0x18, 0x98, 0x49,
	0x43, 0x4a, 0x01, 0x07, 0xda, 0x84, 0x47, 0xf0, 0xad, 0xcd, 0x5c, 0x46, 0xad, 0xee, 0xce, 0xf9,
	0xdd, 0x3f, 0x70, 0xee, 0xc0, 0xe4, 0xb5, 0x88, 0x1a, 0x5d, 0x77, 0x35, 0xb2, 0x26, 0x0b, 0x3f,
	0x18, 0xcc, 0xe3, 0xb2, 0x3e, 0xca, 0x4d, 0xb2, 0x8d, 0x45, 0x59, 0x22, 0xc2, 0x28, 0x6b, 0xab,
	0x96, 0x3b, 0x4b, 0x67, 0x35, 0x4d, 0x49, 0xe3, 0x25, 0xf8, 0x22, 0xef, 0x8a, 0xba, 0xe2, 0x8c,
	0xa8, 0x75, 0x86, 0x6b, 0xb5, 0x33, 0xdc, 0x1d, 0xf8, 0xe0, 0x90, 0xc3, 0x38, 0x37, 0x3b, 0xb7,
	0x92, 0x8f, 0xa8, 0xf0, 0x65, 0x31, 0x80, 0x09, 0xc9, 0x17, 0xd5, 0x73, 0x8f, 0x4a, 0xdf, 0x1e,
	0xff, 0x03, 0x2b, 0x24, 0xf7, 0x89, 0xb2, 0x42, 0xe2, 0x2d, 0xf8, 0x8d, 0xd0, 0xe2, 0xd0, 0xf2,
	0xf1, 0xd2, 0x5d, 0xcd, 0xd6, 0x57, 0x51, 0x93, 0x45, 0xe7, 0xff, 0x1a, 0x25, 0x54, 0x7e, 0xaa,
	0x3a, 0xdd, 0xa7, 0xb6, 0x37, 0xb8, 0x87, 0xd9, 0x19, 0xc6, 0x05, 0xb8, 0x7b, 0xd5, 0xdb, 0x34,
	0x46, 0xe2, 0x05, 0x78, 0x27, 0x51, 0x1e, 0x95, 0xcd, 0x32, 0x98, 0x07, 0x76, 0xe7, 0x84, 0xcf,
	0x3f, 0xa7, 0x78, 0x14, 0xf9, 0xde, 0x9c, 0x22, 0xaf, 0xa5, 0xa2, 0x61, 0x2f, 0x25, 0x6d, 0xf6,
	0x1d, 0xda, 0x9d, 0x9d, 0x35, 0xd2, 0x74, 0x49, 0xd1, 0x09, 0x3a, 0xc1, 0x3c, 0x25, 0xbd, 0xde,
	0xd8, 0x4d, 0x6f, 0x4a, 0x9f, 0x8a, 0x5c, 0xe1, 0x35, 0x4c, 0xdf, 0x29, 0x67, 0x9a, 0xc4, 0xb8,
	0xf8, 0x9b, 0x23, 0xf8, 0x45, 0xcc, 0xa7, 0xc3, 0x7f, 0x99, 0x4f, 0x6f, 0x74, 0xf3, 0x19, 0x00,
	0x00, 0xff, 0xff, 0x52, 0xda, 0x39, 0x4b, 0xaf, 0x01, 0x00, 0x00,
}
