// Code generated by protoc-gen-go.
// source: Li.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CloudAPICall struct {
	Cloud    string            `protobuf:"bytes,1,opt,name=cloud" json:"cloud,omitempty"`
	Service  string            `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Action   string            `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	Region   string            `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	CloudId  string            `protobuf:"bytes,5,opt,name=cloudId" json:"cloudId,omitempty"`
	CloudKey string            `protobuf:"bytes,6,opt,name=cloudKey" json:"cloudKey,omitempty"`
	Params   map[string]string `protobuf:"bytes,7,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CloudAPICall) Reset()                    { *m = CloudAPICall{} }
func (m *CloudAPICall) String() string            { return proto.CompactTextString(m) }
func (*CloudAPICall) ProtoMessage()               {}
func (*CloudAPICall) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *CloudAPICall) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *CloudAPICall) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *CloudAPICall) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *CloudAPICall) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CloudAPICall) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *CloudAPICall) GetCloudKey() string {
	if m != nil {
		return m.CloudKey
	}
	return ""
}

func (m *CloudAPICall) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type CloudAPIBack struct {
	Code int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CloudAPIBack) Reset()                    { *m = CloudAPIBack{} }
func (m *CloudAPIBack) String() string            { return proto.CompactTextString(m) }
func (*CloudAPIBack) ProtoMessage()               {}
func (*CloudAPIBack) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *CloudAPIBack) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CloudAPIBack) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CloudTokenCall struct {
	Cloud      string `protobuf:"bytes,1,opt,name=cloud" json:"cloud,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Id         string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Key        string `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	AAATokenID string `protobuf:"bytes,5,opt,name=AAATokenID" json:"AAATokenID,omitempty"`
}

func (m *CloudTokenCall) Reset()                    { *m = CloudTokenCall{} }
func (m *CloudTokenCall) String() string            { return proto.CompactTextString(m) }
func (*CloudTokenCall) ProtoMessage()               {}
func (*CloudTokenCall) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *CloudTokenCall) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *CloudTokenCall) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CloudTokenCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CloudTokenCall) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CloudTokenCall) GetAAATokenID() string {
	if m != nil {
		return m.AAATokenID
	}
	return ""
}

type CloudTokenBack struct {
	Code int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Key  string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *CloudTokenBack) Reset()                    { *m = CloudTokenBack{} }
func (m *CloudTokenBack) String() string            { return proto.CompactTextString(m) }
func (*CloudTokenBack) ProtoMessage()               {}
func (*CloudTokenBack) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *CloudTokenBack) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CloudTokenBack) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CloudTokenBack) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*CloudAPICall)(nil), "pb.CloudAPICall")
	proto.RegisterType((*CloudAPIBack)(nil), "pb.CloudAPIBack")
	proto.RegisterType((*CloudTokenCall)(nil), "pb.CloudTokenCall")
	proto.RegisterType((*CloudTokenBack)(nil), "pb.CloudTokenBack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudAPIService service

type CloudAPIServiceClient interface {
	RequestRPC(ctx context.Context, in *CloudAPICall, opts ...grpc.CallOption) (*CloudAPIBack, error)
}

type cloudAPIServiceClient struct {
	cc *grpc.ClientConn
}

func NewCloudAPIServiceClient(cc *grpc.ClientConn) CloudAPIServiceClient {
	return &cloudAPIServiceClient{cc}
}

func (c *cloudAPIServiceClient) RequestRPC(ctx context.Context, in *CloudAPICall, opts ...grpc.CallOption) (*CloudAPIBack, error) {
	out := new(CloudAPIBack)
	err := grpc.Invoke(ctx, "/pb.CloudAPIService/RequestRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudAPIService service

type CloudAPIServiceServer interface {
	RequestRPC(context.Context, *CloudAPICall) (*CloudAPIBack, error)
}

func RegisterCloudAPIServiceServer(s *grpc.Server, srv CloudAPIServiceServer) {
	s.RegisterService(&_CloudAPIService_serviceDesc, srv)
}

func _CloudAPIService_RequestRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAPICall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAPIServiceServer).RequestRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudAPIService/RequestRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAPIServiceServer).RequestRPC(ctx, req.(*CloudAPICall))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudAPIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CloudAPIService",
	HandlerType: (*CloudAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestRPC",
			Handler:    _CloudAPIService_RequestRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Li.proto",
}

// Client API for CloudTokenService service

type CloudTokenServiceClient interface {
	SetRPC(ctx context.Context, in *CloudTokenCall, opts ...grpc.CallOption) (*CloudTokenBack, error)
	GetRPC(ctx context.Context, in *CloudTokenCall, opts ...grpc.CallOption) (*CloudTokenBack, error)
}

type cloudTokenServiceClient struct {
	cc *grpc.ClientConn
}

func NewCloudTokenServiceClient(cc *grpc.ClientConn) CloudTokenServiceClient {
	return &cloudTokenServiceClient{cc}
}

func (c *cloudTokenServiceClient) SetRPC(ctx context.Context, in *CloudTokenCall, opts ...grpc.CallOption) (*CloudTokenBack, error) {
	out := new(CloudTokenBack)
	err := grpc.Invoke(ctx, "/pb.CloudTokenService/SetRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudTokenServiceClient) GetRPC(ctx context.Context, in *CloudTokenCall, opts ...grpc.CallOption) (*CloudTokenBack, error) {
	out := new(CloudTokenBack)
	err := grpc.Invoke(ctx, "/pb.CloudTokenService/GetRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudTokenService service

type CloudTokenServiceServer interface {
	SetRPC(context.Context, *CloudTokenCall) (*CloudTokenBack, error)
	GetRPC(context.Context, *CloudTokenCall) (*CloudTokenBack, error)
}

func RegisterCloudTokenServiceServer(s *grpc.Server, srv CloudTokenServiceServer) {
	s.RegisterService(&_CloudTokenService_serviceDesc, srv)
}

func _CloudTokenService_SetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudTokenCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudTokenServiceServer).SetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudTokenService/SetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudTokenServiceServer).SetRPC(ctx, req.(*CloudTokenCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudTokenService_GetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudTokenCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudTokenServiceServer).GetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudTokenService/GetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudTokenServiceServer).GetRPC(ctx, req.(*CloudTokenCall))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudTokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CloudTokenService",
	HandlerType: (*CloudTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRPC",
			Handler:    _CloudTokenService_SetRPC_Handler,
		},
		{
			MethodName: "GetRPC",
			Handler:    _CloudTokenService_GetRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Li.proto",
}

func init() { proto.RegisterFile("Li.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4f, 0x4f, 0xfa, 0x40,
	0x14, 0xfc, 0xd1, 0x96, 0xc2, 0xef, 0x41, 0x10, 0x37, 0xc6, 0x6c, 0x1a, 0x63, 0x48, 0x4f, 0x9c,
	0x7a, 0xa8, 0xc6, 0xa8, 0xb7, 0x8a, 0x68, 0x88, 0x1e, 0x48, 0xf1, 0x0b, 0x2c, 0xed, 0xc6, 0x34,
	0x94, 0xb6, 0x96, 0x42, 0x42, 0xf4, 0x6b, 0xf8, 0x7d, 0xcd, 0xbe, 0xdd, 0xfe, 0x91, 0x44, 0x13,
	0x6f, 0x6f, 0x66, 0x99, 0x99, 0xf7, 0x86, 0x42, 0xf7, 0x39, 0x72, 0xb2, 0x3c, 0x2d, 0x52, 0xa2,
	0x65, 0x4b, 0xfb, 0x53, 0x83, 0xfe, 0x24, 0x4e, 0xb7, 0xa1, 0x37, 0x9f, 0x4d, 0x58, 0x1c, 0x93,
	0x13, 0x68, 0x07, 0x02, 0xd3, 0xd6, 0xa8, 0x35, 0xfe, 0xef, 0x4b, 0x40, 0x28, 0x74, 0x36, 0x3c,
	0xdf, 0x45, 0x01, 0xa7, 0x1a, 0xf2, 0x25, 0x24, 0xa7, 0x60, 0xb2, 0xa0, 0x88, 0xd2, 0x84, 0xea,
	0xf8, 0xa0, 0x90, 0xe0, 0x73, 0xfe, 0x2a, 0x78, 0x43, 0xf2, 0x12, 0x09, 0x27, 0xb4, 0x9c, 0x85,
	0xb4, 0x2d, 0x9d, 0x14, 0x24, 0x16, 0x74, 0x71, 0x7c, 0xe2, 0x7b, 0x6a, 0xe2, 0x53, 0x85, 0xc9,
	0x25, 0x98, 0x19, 0xcb, 0xd9, 0x7a, 0x43, 0x3b, 0x23, 0x7d, 0xdc, 0x73, 0xcf, 0x9c, 0x6c, 0xe9,
	0x34, 0xf7, 0x76, 0xe6, 0xf8, 0x3c, 0x4d, 0x8a, 0x7c, 0xef, 0xab, 0xdf, 0x5a, 0x37, 0xd0, 0x6b,
	0xd0, 0x64, 0x08, 0xfa, 0x8a, 0xef, 0xd5, 0x61, 0x62, 0x14, 0xc7, 0xee, 0x58, 0xbc, 0x2d, 0x8f,
	0x92, 0xe0, 0x56, 0xbb, 0x6e, 0xd9, 0x57, 0x75, 0x2d, 0x77, 0x2c, 0x58, 0x11, 0x02, 0x46, 0x90,
	0x86, 0x1c, 0xc5, 0xba, 0x8f, 0xb3, 0xe0, 0x42, 0x56, 0x30, 0x14, 0xf7, 0x7d, 0x9c, 0xed, 0x0f,
	0x18, 0xa0, 0xee, 0x25, 0x5d, 0xf1, 0xe4, 0x97, 0x42, 0x09, 0x18, 0x09, 0x5b, 0x97, 0xc1, 0x38,
	0x93, 0x01, 0x68, 0x51, 0xa8, 0x6a, 0xd4, 0xa2, 0xb0, 0xdc, 0xd7, 0xa8, 0xf7, 0x3d, 0x07, 0xf0,
	0x3c, 0x0f, 0xbd, 0x67, 0xf7, 0xaa, 0xbf, 0x06, 0x63, 0x3f, 0x34, 0xd3, 0x7f, 0xdc, 0x5b, 0xe6,
	0x68, 0x87, 0x39, 0x7a, 0x95, 0xe3, 0x4e, 0xe1, 0xa8, 0xbc, 0x7e, 0xa1, 0xfe, 0x67, 0x17, 0xc0,
	0xe7, 0x6f, 0x5b, 0xbe, 0x29, 0xfc, 0xf9, 0x84, 0x0c, 0x0f, 0xfb, 0xb7, 0xbe, 0x31, 0x22, 0xda,
	0xfe, 0xe7, 0xbe, 0xc3, 0x71, 0xbd, 0x4e, 0x6d, 0x64, 0x2e, 0x38, 0x9a, 0x90, 0x4a, 0x52, 0xb5,
	0x65, 0x1d, 0x70, 0xd2, 0x48, 0x68, 0x1e, 0xff, 0xa8, 0x59, 0x9a, 0xf8, 0x91, 0x5f, 0x7c, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x9f, 0xf7, 0x43, 0x06, 0xf0, 0x02, 0x00, 0x00,
}
