// Code generated by protoc-gen-go.
// source: He.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AAAGenerateTokenCall struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Phone string `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
}

func (m *AAAGenerateTokenCall) Reset()                    { *m = AAAGenerateTokenCall{} }
func (m *AAAGenerateTokenCall) String() string            { return proto.CompactTextString(m) }
func (*AAAGenerateTokenCall) ProtoMessage()               {}
func (*AAAGenerateTokenCall) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *AAAGenerateTokenCall) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AAAGenerateTokenCall) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type AAAGenerateTokenBack struct {
	Code int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Key  string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *AAAGenerateTokenBack) Reset()                    { *m = AAAGenerateTokenBack{} }
func (m *AAAGenerateTokenBack) String() string            { return proto.CompactTextString(m) }
func (*AAAGenerateTokenBack) ProtoMessage()               {}
func (*AAAGenerateTokenBack) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *AAAGenerateTokenBack) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AAAGenerateTokenBack) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AAAGenerateTokenBack) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type AAATokenCall struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (m *AAATokenCall) Reset()                    { *m = AAATokenCall{} }
func (m *AAATokenCall) String() string            { return proto.CompactTextString(m) }
func (*AAATokenCall) ProtoMessage()               {}
func (*AAATokenCall) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *AAATokenCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AAATokenCall) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type AAATokenBack struct {
	Code    int64 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	IsValid bool  `protobuf:"varint,2,opt,name=isValid" json:"isValid,omitempty"`
}

func (m *AAATokenBack) Reset()                    { *m = AAATokenBack{} }
func (m *AAATokenBack) String() string            { return proto.CompactTextString(m) }
func (*AAATokenBack) ProtoMessage()               {}
func (*AAATokenBack) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *AAATokenBack) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AAATokenBack) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

type AAAServiceCall struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
}

func (m *AAAServiceCall) Reset()                    { *m = AAAServiceCall{} }
func (m *AAAServiceCall) String() string            { return proto.CompactTextString(m) }
func (*AAAServiceCall) ProtoMessage()               {}
func (*AAAServiceCall) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *AAAServiceCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AAAServiceCall) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type AAAServiceBack struct {
	Code    int64 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	IsValid bool  `protobuf:"varint,2,opt,name=isValid" json:"isValid,omitempty"`
}

func (m *AAAServiceBack) Reset()                    { *m = AAAServiceBack{} }
func (m *AAAServiceBack) String() string            { return proto.CompactTextString(m) }
func (*AAAServiceBack) ProtoMessage()               {}
func (*AAAServiceBack) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *AAAServiceBack) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AAAServiceBack) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

type AAAEventCall struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Events []byte `protobuf:"bytes,2,opt,name=events,proto3" json:"events,omitempty"`
}

func (m *AAAEventCall) Reset()                    { *m = AAAEventCall{} }
func (m *AAAEventCall) String() string            { return proto.CompactTextString(m) }
func (*AAAEventCall) ProtoMessage()               {}
func (*AAAEventCall) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *AAAEventCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AAAEventCall) GetEvents() []byte {
	if m != nil {
		return m.Events
	}
	return nil
}

type AAAEventBack struct {
	Code     int64 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	IsRecode bool  `protobuf:"varint,2,opt,name=isRecode" json:"isRecode,omitempty"`
}

func (m *AAAEventBack) Reset()                    { *m = AAAEventBack{} }
func (m *AAAEventBack) String() string            { return proto.CompactTextString(m) }
func (*AAAEventBack) ProtoMessage()               {}
func (*AAAEventBack) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *AAAEventBack) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AAAEventBack) GetIsRecode() bool {
	if m != nil {
		return m.IsRecode
	}
	return false
}

func init() {
	proto.RegisterType((*AAAGenerateTokenCall)(nil), "pb.AAAGenerateTokenCall")
	proto.RegisterType((*AAAGenerateTokenBack)(nil), "pb.AAAGenerateTokenBack")
	proto.RegisterType((*AAATokenCall)(nil), "pb.AAATokenCall")
	proto.RegisterType((*AAATokenBack)(nil), "pb.AAATokenBack")
	proto.RegisterType((*AAAServiceCall)(nil), "pb.AAAServiceCall")
	proto.RegisterType((*AAAServiceBack)(nil), "pb.AAAServiceBack")
	proto.RegisterType((*AAAEventCall)(nil), "pb.AAAEventCall")
	proto.RegisterType((*AAAEventBack)(nil), "pb.AAAEventBack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AAAPublicService service

type AAAPublicServiceClient interface {
	GenerateTokenRPC(ctx context.Context, in *AAAGenerateTokenCall, opts ...grpc.CallOption) (*AAAGenerateTokenBack, error)
}

type aAAPublicServiceClient struct {
	cc *grpc.ClientConn
}

func NewAAAPublicServiceClient(cc *grpc.ClientConn) AAAPublicServiceClient {
	return &aAAPublicServiceClient{cc}
}

func (c *aAAPublicServiceClient) GenerateTokenRPC(ctx context.Context, in *AAAGenerateTokenCall, opts ...grpc.CallOption) (*AAAGenerateTokenBack, error) {
	out := new(AAAGenerateTokenBack)
	err := grpc.Invoke(ctx, "/pb.AAAPublicService/GenerateTokenRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AAAPublicService service

type AAAPublicServiceServer interface {
	GenerateTokenRPC(context.Context, *AAAGenerateTokenCall) (*AAAGenerateTokenBack, error)
}

func RegisterAAAPublicServiceServer(s *grpc.Server, srv AAAPublicServiceServer) {
	s.RegisterService(&_AAAPublicService_serviceDesc, srv)
}

func _AAAPublicService_GenerateTokenRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AAAGenerateTokenCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AAAPublicServiceServer).GenerateTokenRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AAAPublicService/GenerateTokenRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AAAPublicServiceServer).GenerateTokenRPC(ctx, req.(*AAAGenerateTokenCall))
	}
	return interceptor(ctx, in, info, handler)
}

var _AAAPublicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AAAPublicService",
	HandlerType: (*AAAPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateTokenRPC",
			Handler:    _AAAPublicService_GenerateTokenRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "He.proto",
}

// Client API for AAAPrivateService service

type AAAPrivateServiceClient interface {
	AuthenticationRPC(ctx context.Context, in *AAATokenCall, opts ...grpc.CallOption) (*AAATokenBack, error)
	AuthorizationRPC(ctx context.Context, in *AAAServiceCall, opts ...grpc.CallOption) (*AAAServiceBack, error)
	AccountingRPC(ctx context.Context, in *AAAEventCall, opts ...grpc.CallOption) (*AAAEventBack, error)
}

type aAAPrivateServiceClient struct {
	cc *grpc.ClientConn
}

func NewAAAPrivateServiceClient(cc *grpc.ClientConn) AAAPrivateServiceClient {
	return &aAAPrivateServiceClient{cc}
}

func (c *aAAPrivateServiceClient) AuthenticationRPC(ctx context.Context, in *AAATokenCall, opts ...grpc.CallOption) (*AAATokenBack, error) {
	out := new(AAATokenBack)
	err := grpc.Invoke(ctx, "/pb.AAAPrivateService/AuthenticationRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aAAPrivateServiceClient) AuthorizationRPC(ctx context.Context, in *AAAServiceCall, opts ...grpc.CallOption) (*AAAServiceBack, error) {
	out := new(AAAServiceBack)
	err := grpc.Invoke(ctx, "/pb.AAAPrivateService/AuthorizationRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aAAPrivateServiceClient) AccountingRPC(ctx context.Context, in *AAAEventCall, opts ...grpc.CallOption) (*AAAEventBack, error) {
	out := new(AAAEventBack)
	err := grpc.Invoke(ctx, "/pb.AAAPrivateService/AccountingRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AAAPrivateService service

type AAAPrivateServiceServer interface {
	AuthenticationRPC(context.Context, *AAATokenCall) (*AAATokenBack, error)
	AuthorizationRPC(context.Context, *AAAServiceCall) (*AAAServiceBack, error)
	AccountingRPC(context.Context, *AAAEventCall) (*AAAEventBack, error)
}

func RegisterAAAPrivateServiceServer(s *grpc.Server, srv AAAPrivateServiceServer) {
	s.RegisterService(&_AAAPrivateService_serviceDesc, srv)
}

func _AAAPrivateService_AuthenticationRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AAATokenCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AAAPrivateServiceServer).AuthenticationRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AAAPrivateService/AuthenticationRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AAAPrivateServiceServer).AuthenticationRPC(ctx, req.(*AAATokenCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _AAAPrivateService_AuthorizationRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AAAServiceCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AAAPrivateServiceServer).AuthorizationRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AAAPrivateService/AuthorizationRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AAAPrivateServiceServer).AuthorizationRPC(ctx, req.(*AAAServiceCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _AAAPrivateService_AccountingRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AAAEventCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AAAPrivateServiceServer).AccountingRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AAAPrivateService/AccountingRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AAAPrivateServiceServer).AccountingRPC(ctx, req.(*AAAEventCall))
	}
	return interceptor(ctx, in, info, handler)
}

var _AAAPrivateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AAAPrivateService",
	HandlerType: (*AAAPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticationRPC",
			Handler:    _AAAPrivateService_AuthenticationRPC_Handler,
		},
		{
			MethodName: "AuthorizationRPC",
			Handler:    _AAAPrivateService_AuthorizationRPC_Handler,
		},
		{
			MethodName: "AccountingRPC",
			Handler:    _AAAPrivateService_AccountingRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "He.proto",
}

func init() { proto.RegisterFile("He.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0x6a, 0xdb, 0x40,
	0x14, 0x85, 0x2b, 0xb9, 0xf5, 0xcf, 0xc5, 0x35, 0xf2, 0x60, 0x8a, 0x10, 0x5d, 0x14, 0xad, 0xba,
	0xf2, 0xc2, 0xa5, 0x85, 0x16, 0x63, 0x18, 0x9b, 0x52, 0x2f, 0xba, 0x30, 0x4a, 0xc8, 0x2a, 0x9b,
	0x91, 0x7c, 0xb1, 0x07, 0x2b, 0x33, 0x42, 0x1a, 0x19, 0x92, 0xd7, 0xcb, 0x8b, 0x05, 0x8d, 0x46,
	0x3f, 0x4e, 0xe4, 0x4d, 0x76, 0x73, 0xcf, 0xd5, 0x77, 0xce, 0x41, 0x23, 0xc1, 0x70, 0x8b, 0xf3,
	0x24, 0x95, 0x4a, 0x12, 0x3b, 0x09, 0xfd, 0x35, 0xcc, 0x28, 0xa5, 0xff, 0x50, 0x60, 0xca, 0x14,
	0xde, 0xca, 0x13, 0x8a, 0x0d, 0x8b, 0x63, 0x32, 0x83, 0x4f, 0xf8, 0xc0, 0x78, 0xec, 0x5a, 0xdf,
	0xac, 0xef, 0xa3, 0xa0, 0x1c, 0x0a, 0x35, 0x39, 0x4a, 0x81, 0xae, 0x5d, 0xaa, 0x7a, 0xf0, 0xff,
	0xbf, 0xf5, 0x58, 0xb3, 0xe8, 0x44, 0x08, 0x7c, 0x8c, 0xe4, 0x1e, 0xb5, 0x45, 0x2f, 0xd0, 0x67,
	0x32, 0x01, 0x9b, 0xef, 0x0d, 0x6e, 0xf3, 0x3d, 0x71, 0xa0, 0x77, 0xc2, 0x47, 0xb7, 0xa7, 0x85,
	0xe2, 0xe8, 0x2f, 0x61, 0x4c, 0x29, 0x6d, 0x9a, 0x94, 0x84, 0x55, 0x13, 0x5f, 0x61, 0x94, 0xf1,
	0x83, 0x60, 0x2a, 0x4f, 0xab, 0x1e, 0x8d, 0xd0, 0xa6, 0xaf, 0x76, 0x70, 0x61, 0xc0, 0xb3, 0x3b,
	0x16, 0x9b, 0x22, 0xc3, 0xa0, 0x1a, 0xfd, 0x3f, 0x30, 0xa1, 0x94, 0xde, 0x60, 0x7a, 0xe6, 0x11,
	0x76, 0xa6, 0xbb, 0x30, 0xc8, 0xca, 0xb5, 0xc9, 0xae, 0x46, 0x7f, 0xd5, 0x66, 0xdf, 0x91, 0xfd,
	0x4b, 0x37, 0xff, 0x7b, 0x46, 0xa1, 0x3a, 0x93, 0xbf, 0x40, 0x1f, 0x8b, 0x65, 0xa6, 0xc1, 0x71,
	0x60, 0x26, 0x7f, 0xd5, 0x70, 0x57, 0x53, 0x3d, 0x18, 0xf2, 0x2c, 0x40, 0xad, 0x97, 0xb1, 0xf5,
	0xbc, 0xb8, 0x07, 0x87, 0x52, 0xba, 0xcb, 0xc3, 0x98, 0x47, 0xa6, 0x3d, 0xd9, 0x82, 0x73, 0x71,
	0x9d, 0xc1, 0x6e, 0x43, 0xdc, 0x79, 0x12, 0xce, 0xbb, 0xbe, 0x15, 0xaf, 0x73, 0x53, 0x74, 0xf1,
	0x3f, 0x2c, 0x9e, 0x2d, 0x98, 0x16, 0xf6, 0x29, 0x3f, 0x33, 0x85, 0x95, 0xff, 0x6f, 0x98, 0xd2,
	0x5c, 0x1d, 0x51, 0x28, 0x1e, 0x31, 0xc5, 0xa5, 0x0e, 0x70, 0x8c, 0x4d, 0x63, 0x7c, 0xa1, 0x94,
	0x86, 0x64, 0x09, 0x4e, 0x81, 0xca, 0x94, 0x3f, 0xd5, 0x24, 0x31, 0xcf, 0xb5, 0x2e, 0xce, 0x7b,
	0xa5, 0x19, 0xfa, 0x27, 0x7c, 0xa6, 0x51, 0x24, 0x73, 0xa1, 0xb8, 0x38, 0xb4, 0x43, 0xeb, 0xf7,
	0xee, 0x5d, 0x28, 0x25, 0x16, 0xf6, 0xf5, 0x0f, 0xf3, 0xe3, 0x25, 0x00, 0x00, 0xff, 0xff, 0x0a,
	0x8b, 0x9f, 0x50, 0x3c, 0x03, 0x00, 0x00,
}
