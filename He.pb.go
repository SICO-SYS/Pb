// Code generated by protoc-gen-go.
// source: He.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	He.proto
	Li.proto

It has these top-level messages:
	ResponseMsg
	AAA_RegRequest
	AAA_APIKeypair
	AAA_APIToken
	AAA_ThirdpartyKey
	CloudResponse
	CloudParams
	CloudRequest
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResponseMsg struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *ResponseMsg) Reset()                    { *m = ResponseMsg{} }
func (m *ResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ResponseMsg) ProtoMessage()               {}
func (*ResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ResponseMsg) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ResponseMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type AAA_RegRequest struct {
	Random string `protobuf:"bytes,1,opt,name=random" json:"random,omitempty"`
	Email  string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *AAA_RegRequest) Reset()                    { *m = AAA_RegRequest{} }
func (m *AAA_RegRequest) String() string            { return proto.CompactTextString(m) }
func (*AAA_RegRequest) ProtoMessage()               {}
func (*AAA_RegRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AAA_RegRequest) GetRandom() string {
	if m != nil {
		return m.Random
	}
	return ""
}

func (m *AAA_RegRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type AAA_APIKeypair struct {
	Id  string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *AAA_APIKeypair) Reset()                    { *m = AAA_APIKeypair{} }
func (m *AAA_APIKeypair) String() string            { return proto.CompactTextString(m) }
func (*AAA_APIKeypair) ProtoMessage()               {}
func (*AAA_APIKeypair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AAA_APIKeypair) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AAA_APIKeypair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type AAA_APIToken struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (m *AAA_APIToken) Reset()                    { *m = AAA_APIToken{} }
func (m *AAA_APIToken) String() string            { return proto.CompactTextString(m) }
func (*AAA_APIToken) ProtoMessage()               {}
func (*AAA_APIToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AAA_APIToken) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AAA_APIToken) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type AAA_ThirdpartyKey struct {
	Apitoken *AAA_APIToken `protobuf:"bytes,1,opt,name=apitoken" json:"apitoken,omitempty"`
	Apitype  string        `protobuf:"bytes,2,opt,name=apitype" json:"apitype,omitempty"`
	Name     string        `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Id       string        `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	Key      string        `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
}

func (m *AAA_ThirdpartyKey) Reset()                    { *m = AAA_ThirdpartyKey{} }
func (m *AAA_ThirdpartyKey) String() string            { return proto.CompactTextString(m) }
func (*AAA_ThirdpartyKey) ProtoMessage()               {}
func (*AAA_ThirdpartyKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AAA_ThirdpartyKey) GetApitoken() *AAA_APIToken {
	if m != nil {
		return m.Apitoken
	}
	return nil
}

func (m *AAA_ThirdpartyKey) GetApitype() string {
	if m != nil {
		return m.Apitype
	}
	return ""
}

func (m *AAA_ThirdpartyKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AAA_ThirdpartyKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AAA_ThirdpartyKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*ResponseMsg)(nil), "pb.ResponseMsg")
	proto.RegisterType((*AAA_RegRequest)(nil), "pb.AAA_RegRequest")
	proto.RegisterType((*AAA_APIKeypair)(nil), "pb.AAA_APIKeypair")
	proto.RegisterType((*AAA_APIToken)(nil), "pb.AAA_APIToken")
	proto.RegisterType((*AAA_ThirdpartyKey)(nil), "pb.AAA_ThirdpartyKey")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AAA_Open service

type AAA_OpenClient interface {
	AAA_RegUser(ctx context.Context, in *AAA_RegRequest, opts ...grpc.CallOption) (*AAA_APIKeypair, error)
}

type aAA_OpenClient struct {
	cc *grpc.ClientConn
}

func NewAAA_OpenClient(cc *grpc.ClientConn) AAA_OpenClient {
	return &aAA_OpenClient{cc}
}

func (c *aAA_OpenClient) AAA_RegUser(ctx context.Context, in *AAA_RegRequest, opts ...grpc.CallOption) (*AAA_APIKeypair, error) {
	out := new(AAA_APIKeypair)
	err := grpc.Invoke(ctx, "/pb.AAA_Open/AAA_RegUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AAA_Open service

type AAA_OpenServer interface {
	AAA_RegUser(context.Context, *AAA_RegRequest) (*AAA_APIKeypair, error)
}

func RegisterAAA_OpenServer(s *grpc.Server, srv AAA_OpenServer) {
	s.RegisterService(&_AAA_Open_serviceDesc, srv)
}

func _AAA_Open_AAA_RegUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AAA_RegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AAA_OpenServer).AAA_RegUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AAA_Open/AAA_RegUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AAA_OpenServer).AAA_RegUser(ctx, req.(*AAA_RegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AAA_Open_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AAA_Open",
	HandlerType: (*AAA_OpenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AAA_RegUser",
			Handler:    _AAA_Open_AAA_RegUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "He.proto",
}

// Client API for AAA_Secret service

type AAA_SecretClient interface {
	AAA_Auth(ctx context.Context, in *AAA_APIToken, opts ...grpc.CallOption) (*ResponseMsg, error)
	AAA_ThirdKeypair(ctx context.Context, in *AAA_ThirdpartyKey, opts ...grpc.CallOption) (*ResponseMsg, error)
	AAA_GetThirdKey(ctx context.Context, in *AAA_ThirdpartyKey, opts ...grpc.CallOption) (*AAA_APIKeypair, error)
}

type aAA_SecretClient struct {
	cc *grpc.ClientConn
}

func NewAAA_SecretClient(cc *grpc.ClientConn) AAA_SecretClient {
	return &aAA_SecretClient{cc}
}

func (c *aAA_SecretClient) AAA_Auth(ctx context.Context, in *AAA_APIToken, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := grpc.Invoke(ctx, "/pb.AAA_Secret/AAA_Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aAA_SecretClient) AAA_ThirdKeypair(ctx context.Context, in *AAA_ThirdpartyKey, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := grpc.Invoke(ctx, "/pb.AAA_Secret/AAA_ThirdKeypair", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aAA_SecretClient) AAA_GetThirdKey(ctx context.Context, in *AAA_ThirdpartyKey, opts ...grpc.CallOption) (*AAA_APIKeypair, error) {
	out := new(AAA_APIKeypair)
	err := grpc.Invoke(ctx, "/pb.AAA_Secret/AAA_GetThirdKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AAA_Secret service

type AAA_SecretServer interface {
	AAA_Auth(context.Context, *AAA_APIToken) (*ResponseMsg, error)
	AAA_ThirdKeypair(context.Context, *AAA_ThirdpartyKey) (*ResponseMsg, error)
	AAA_GetThirdKey(context.Context, *AAA_ThirdpartyKey) (*AAA_APIKeypair, error)
}

func RegisterAAA_SecretServer(s *grpc.Server, srv AAA_SecretServer) {
	s.RegisterService(&_AAA_Secret_serviceDesc, srv)
}

func _AAA_Secret_AAA_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AAA_APIToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AAA_SecretServer).AAA_Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AAA_Secret/AAA_Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AAA_SecretServer).AAA_Auth(ctx, req.(*AAA_APIToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AAA_Secret_AAA_ThirdKeypair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AAA_ThirdpartyKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AAA_SecretServer).AAA_ThirdKeypair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AAA_Secret/AAA_ThirdKeypair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AAA_SecretServer).AAA_ThirdKeypair(ctx, req.(*AAA_ThirdpartyKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _AAA_Secret_AAA_GetThirdKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AAA_ThirdpartyKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AAA_SecretServer).AAA_GetThirdKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AAA_Secret/AAA_GetThirdKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AAA_SecretServer).AAA_GetThirdKey(ctx, req.(*AAA_ThirdpartyKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _AAA_Secret_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AAA_Secret",
	HandlerType: (*AAA_SecretServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AAA_Auth",
			Handler:    _AAA_Secret_AAA_Auth_Handler,
		},
		{
			MethodName: "AAA_ThirdKeypair",
			Handler:    _AAA_Secret_AAA_ThirdKeypair_Handler,
		},
		{
			MethodName: "AAA_GetThirdKey",
			Handler:    _AAA_Secret_AAA_GetThirdKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "He.proto",
}

func init() { proto.RegisterFile("He.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0x69, 0xf9, 0xf3, 0xc2, 0xf0, 0x06, 0x78, 0x27, 0xaf, 0xa6, 0x21, 0x1e, 0x48, 0x4f,
	0x1c, 0x0c, 0x26, 0xe5, 0xe0, 0x85, 0x90, 0x34, 0x1e, 0xd4, 0x10, 0xa3, 0xa9, 0x78, 0x36, 0x85,
	0x4e, 0x4a, 0x83, 0x6d, 0xd7, 0xdd, 0xe5, 0xd0, 0x8f, 0xe1, 0xe7, 0xf1, 0xcb, 0x99, 0x2d, 0xbb,
	0x80, 0x82, 0xb7, 0x99, 0xc9, 0xfe, 0x9e, 0x99, 0x79, 0x66, 0xa1, 0x79, 0x47, 0x23, 0xc6, 0x73,
	0x99, 0xa3, 0xcd, 0x16, 0xee, 0x18, 0xda, 0x01, 0x09, 0x96, 0x67, 0x82, 0x1e, 0x44, 0x8c, 0x08,
	0xb5, 0x65, 0x1e, 0x91, 0x63, 0x0d, 0xac, 0x61, 0x3d, 0x28, 0x63, 0xec, 0x41, 0x35, 0x15, 0xb1,
	0x63, 0x0f, 0xac, 0x61, 0x2b, 0x50, 0xa1, 0x3b, 0x85, 0x8e, 0xef, 0xfb, 0xaf, 0x01, 0xc5, 0x01,
	0xbd, 0x6f, 0x48, 0x48, 0x3c, 0x87, 0x06, 0x0f, 0xb3, 0x28, 0x4f, 0x4b, 0xb2, 0x15, 0xe8, 0x0c,
	0xff, 0x43, 0x9d, 0xd2, 0x30, 0x79, 0xd3, 0xf4, 0x36, 0x71, 0xbd, 0x2d, 0xef, 0x3f, 0xdd, 0xcf,
	0xa8, 0x60, 0x61, 0xc2, 0xb1, 0x03, 0x76, 0x12, 0x69, 0xd6, 0x4e, 0x22, 0xd5, 0x73, 0x4d, 0x85,
	0xe9, 0xb9, 0xa6, 0xc2, 0x9d, 0xc0, 0x5f, 0xcd, 0xcc, 0xf3, 0x35, 0x65, 0x47, 0xc4, 0x05, 0xb4,
	0x44, 0x12, 0x67, 0xa1, 0xdc, 0x70, 0xd2, 0xdc, 0xbe, 0xe0, 0x7e, 0x58, 0xf0, 0x4f, 0xe1, 0xf3,
	0x55, 0xc2, 0x23, 0x16, 0x72, 0x59, 0xcc, 0xa8, 0xc0, 0x4b, 0x68, 0x86, 0x2c, 0x91, 0x4a, 0xaf,
	0x54, 0x6a, 0x7b, 0xbd, 0x11, 0x5b, 0x8c, 0x0e, 0xfb, 0x04, 0xbb, 0x17, 0xe8, 0xc0, 0x1f, 0x15,
	0x17, 0xcc, 0xe8, 0x9b, 0x54, 0xb9, 0x96, 0x85, 0x29, 0x39, 0xd5, 0xb2, 0x5c, 0xc6, 0x7a, 0xbe,
	0xda, 0xcf, 0x8d, 0xea, 0xbb, 0x8d, 0xbc, 0x1b, 0x68, 0xaa, 0x4e, 0x8f, 0x8c, 0x32, 0xbc, 0x86,
	0xb6, 0x76, 0xf4, 0x45, 0x10, 0x47, 0x34, 0x63, 0xec, 0x2d, 0xee, 0xe3, 0xc1, 0x68, 0xda, 0x36,
	0xb7, 0xe2, 0x7d, 0x5a, 0x00, 0xaa, 0xf8, 0x4c, 0x4b, 0x4e, 0x12, 0xaf, 0xb6, 0x9a, 0xfe, 0x46,
	0xae, 0xf0, 0x68, 0x97, 0x7e, 0x57, 0x55, 0x0e, 0xce, 0xed, 0x56, 0x70, 0x02, 0xbd, 0x9d, 0x2f,
	0xe6, 0x18, 0x67, 0x06, 0xfc, 0xe6, 0xd6, 0x29, 0x7a, 0x0a, 0x5d, 0xf5, 0xee, 0x96, 0xa4, 0x11,
	0xf8, 0x0d, 0x3e, 0x39, 0xfd, 0xa2, 0x51, 0x7e, 0xc4, 0xf1, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1c, 0x08, 0x0b, 0x9b, 0x94, 0x02, 0x00, 0x00,
}
