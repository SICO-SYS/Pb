// Code generated by protoc-gen-go.
// source: general.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GeneralMsgCall struct {
	Code int64 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
}

func (m *GeneralMsgCall) Reset()                    { *m = GeneralMsgCall{} }
func (m *GeneralMsgCall) String() string            { return proto.CompactTextString(m) }
func (*GeneralMsgCall) ProtoMessage()               {}
func (*GeneralMsgCall) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *GeneralMsgCall) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GeneralMsgBack struct {
	Code int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *GeneralMsgBack) Reset()                    { *m = GeneralMsgBack{} }
func (m *GeneralMsgBack) String() string            { return proto.CompactTextString(m) }
func (*GeneralMsgBack) ProtoMessage()               {}
func (*GeneralMsgBack) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *GeneralMsgBack) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GeneralMsgBack) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*GeneralMsgCall)(nil), "pb.GeneralMsgCall")
	proto.RegisterType((*GeneralMsgBack)(nil), "pb.GeneralMsgBack")
}

func init() { proto.RegisterFile("general.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 105 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4f, 0xcd, 0x4b,
	0x2d, 0x4a, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe1,
	0xe2, 0x73, 0x87, 0x08, 0xfa, 0x16, 0xa7, 0x3b, 0x27, 0xe6, 0xe4, 0x08, 0x09, 0x71, 0xb1, 0x24,
	0xe7, 0xa7, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x81, 0xd9, 0x4a, 0x66, 0xc8, 0xaa,
	0x9c, 0x12, 0x93, 0xb3, 0xb1, 0xa9, 0x12, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0x60, 0x52,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x93, 0xd8, 0xc0, 0x16, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xa3, 0x43, 0xd9, 0xb1, 0x79, 0x00, 0x00, 0x00,
}
