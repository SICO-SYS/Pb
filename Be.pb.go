// Code generated by protoc-gen-go.
// source: Be.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AssetTemplateCall struct {
	Id    string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name  string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Param map[string]string `protobuf:"bytes,3,rep,name=param" json:"param,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AssetTemplateCall) Reset()                    { *m = AssetTemplateCall{} }
func (m *AssetTemplateCall) String() string            { return proto.CompactTextString(m) }
func (*AssetTemplateCall) ProtoMessage()               {}
func (*AssetTemplateCall) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *AssetTemplateCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AssetTemplateCall) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AssetTemplateCall) GetParam() map[string]string {
	if m != nil {
		return m.Param
	}
	return nil
}

type AssetSynchronizeCall struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Cloud   string `protobuf:"bytes,2,opt,name=cloud" json:"cloud,omitempty"`
	Service string `protobuf:"bytes,3,opt,name=service" json:"service,omitempty"`
	Data    []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AssetSynchronizeCall) Reset()                    { *m = AssetSynchronizeCall{} }
func (m *AssetSynchronizeCall) String() string            { return proto.CompactTextString(m) }
func (*AssetSynchronizeCall) ProtoMessage()               {}
func (*AssetSynchronizeCall) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *AssetSynchronizeCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AssetSynchronizeCall) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *AssetSynchronizeCall) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *AssetSynchronizeCall) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type AssetCustomCall struct {
	Id    string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Cloud string            `protobuf:"bytes,2,opt,name=cloud" json:"cloud,omitempty"`
	Param map[string]string `protobuf:"bytes,3,rep,name=param" json:"param,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AssetCustomCall) Reset()                    { *m = AssetCustomCall{} }
func (m *AssetCustomCall) String() string            { return proto.CompactTextString(m) }
func (*AssetCustomCall) ProtoMessage()               {}
func (*AssetCustomCall) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *AssetCustomCall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AssetCustomCall) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *AssetCustomCall) GetParam() map[string]string {
	if m != nil {
		return m.Param
	}
	return nil
}

type AssetMsgBack struct {
	Code int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *AssetMsgBack) Reset()                    { *m = AssetMsgBack{} }
func (m *AssetMsgBack) String() string            { return proto.CompactTextString(m) }
func (*AssetMsgBack) ProtoMessage()               {}
func (*AssetMsgBack) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *AssetMsgBack) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AssetMsgBack) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*AssetTemplateCall)(nil), "pb.AssetTemplateCall")
	proto.RegisterType((*AssetSynchronizeCall)(nil), "pb.AssetSynchronizeCall")
	proto.RegisterType((*AssetCustomCall)(nil), "pb.AssetCustomCall")
	proto.RegisterType((*AssetMsgBack)(nil), "pb.AssetMsgBack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AssetService service

type AssetServiceClient interface {
	SynchronizeRPC(ctx context.Context, in *AssetSynchronizeCall, opts ...grpc.CallOption) (*AssetMsgBack, error)
	CustomRPC(ctx context.Context, in *AssetCustomCall, opts ...grpc.CallOption) (*AssetMsgBack, error)
}

type assetServiceClient struct {
	cc *grpc.ClientConn
}

func NewAssetServiceClient(cc *grpc.ClientConn) AssetServiceClient {
	return &assetServiceClient{cc}
}

func (c *assetServiceClient) SynchronizeRPC(ctx context.Context, in *AssetSynchronizeCall, opts ...grpc.CallOption) (*AssetMsgBack, error) {
	out := new(AssetMsgBack)
	err := grpc.Invoke(ctx, "/pb.AssetService/SynchronizeRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) CustomRPC(ctx context.Context, in *AssetCustomCall, opts ...grpc.CallOption) (*AssetMsgBack, error) {
	out := new(AssetMsgBack)
	err := grpc.Invoke(ctx, "/pb.AssetService/CustomRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AssetService service

type AssetServiceServer interface {
	SynchronizeRPC(context.Context, *AssetSynchronizeCall) (*AssetMsgBack, error)
	CustomRPC(context.Context, *AssetCustomCall) (*AssetMsgBack, error)
}

func RegisterAssetServiceServer(s *grpc.Server, srv AssetServiceServer) {
	s.RegisterService(&_AssetService_serviceDesc, srv)
}

func _AssetService_SynchronizeRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetSynchronizeCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).SynchronizeRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssetService/SynchronizeRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).SynchronizeRPC(ctx, req.(*AssetSynchronizeCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_CustomRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetCustomCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).CustomRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssetService/CustomRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).CustomRPC(ctx, req.(*AssetCustomCall))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AssetService",
	HandlerType: (*AssetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SynchronizeRPC",
			Handler:    _AssetService_SynchronizeRPC_Handler,
		},
		{
			MethodName: "CustomRPC",
			Handler:    _AssetService_CustomRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Be.proto",
}

// Client API for TemplateService service

type TemplateServiceClient interface {
	CreateRPC(ctx context.Context, in *AssetTemplateCall, opts ...grpc.CallOption) (*AssetMsgBack, error)
}

type templateServiceClient struct {
	cc *grpc.ClientConn
}

func NewTemplateServiceClient(cc *grpc.ClientConn) TemplateServiceClient {
	return &templateServiceClient{cc}
}

func (c *templateServiceClient) CreateRPC(ctx context.Context, in *AssetTemplateCall, opts ...grpc.CallOption) (*AssetMsgBack, error) {
	out := new(AssetMsgBack)
	err := grpc.Invoke(ctx, "/pb.TemplateService/CreateRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TemplateService service

type TemplateServiceServer interface {
	CreateRPC(context.Context, *AssetTemplateCall) (*AssetMsgBack, error)
}

func RegisterTemplateServiceServer(s *grpc.Server, srv TemplateServiceServer) {
	s.RegisterService(&_TemplateService_serviceDesc, srv)
}

func _TemplateService_CreateRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetTemplateCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).CreateRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TemplateService/CreateRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).CreateRPC(ctx, req.(*AssetTemplateCall))
	}
	return interceptor(ctx, in, info, handler)
}

var _TemplateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TemplateService",
	HandlerType: (*TemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRPC",
			Handler:    _TemplateService_CreateRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Be.proto",
}

func init() { proto.RegisterFile("Be.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x75, 0x5b, 0x50, 0x19, 0x09, 0xe0, 0x8a, 0xc9, 0x86, 0x83, 0x69, 0x7a, 0xe2, 0xd4, 0x03,
	0x12, 0x42, 0x3c, 0x98, 0x48, 0xe3, 0xc1, 0x83, 0x09, 0x29, 0xfe, 0x81, 0xa5, 0xdd, 0x60, 0xa5,
	0x5f, 0xe9, 0x2e, 0x24, 0x78, 0xf6, 0xbf, 0x18, 0xff, 0xa5, 0xd9, 0xa1, 0x2d, 0x7e, 0xf4, 0x62,
	0xe2, 0xed, 0xcd, 0xec, 0xbe, 0xf7, 0x66, 0x5e, 0x06, 0x4e, 0x67, 0xc2, 0xc9, 0xf2, 0x54, 0xa5,
	0xd4, 0xc8, 0x96, 0xf6, 0x07, 0x81, 0xf3, 0x3b, 0x29, 0x85, 0x7a, 0x12, 0x71, 0x16, 0x71, 0x25,
	0x5c, 0x1e, 0x45, 0xb4, 0x03, 0x46, 0x18, 0x30, 0x62, 0x91, 0x61, 0xcb, 0x33, 0xc2, 0x80, 0x52,
	0x68, 0x24, 0x3c, 0x16, 0xcc, 0xc0, 0x0e, 0x62, 0x3a, 0x81, 0x66, 0xc6, 0x73, 0x1e, 0x33, 0xd3,
	0x32, 0x87, 0x67, 0x23, 0xcb, 0xc9, 0x96, 0xce, 0x2f, 0x25, 0x67, 0xae, 0xbf, 0xdc, 0x27, 0x2a,
	0xdf, 0x79, 0xfb, 0xef, 0x83, 0x29, 0xc0, 0xa1, 0x49, 0x7b, 0x60, 0xae, 0xc5, 0xae, 0xb0, 0xd2,
	0x90, 0xf6, 0xa1, 0xb9, 0xe5, 0xd1, 0xa6, 0x34, 0xdb, 0x17, 0x37, 0xc6, 0x94, 0xd8, 0x2f, 0xd0,
	0x47, 0x83, 0xc5, 0x2e, 0xf1, 0x9f, 0xf3, 0x34, 0x09, 0x5f, 0xeb, 0xa7, 0xed, 0x43, 0xd3, 0x8f,
	0xd2, 0x4d, 0x50, 0x2a, 0x60, 0x41, 0x19, 0x9c, 0x48, 0x91, 0x6f, 0x43, 0x5f, 0x30, 0x13, 0xfb,
	0x65, 0xa9, 0xb7, 0x0b, 0xb8, 0xe2, 0xac, 0x61, 0x91, 0x61, 0xdb, 0x43, 0x6c, 0xbf, 0x13, 0xe8,
	0xa2, 0x99, 0xbb, 0x91, 0x2a, 0x8d, 0xff, 0xe0, 0x33, 0xfe, 0x9e, 0xcb, 0x55, 0x95, 0xcb, 0x41,
	0xe9, 0x5f, 0x53, 0x19, 0x43, 0x1b, 0xe5, 0x1f, 0xe5, 0x6a, 0xc6, 0xfd, 0xb5, 0xde, 0xc6, 0x4f,
	0x03, 0x81, 0x64, 0xd3, 0x43, 0xac, 0xf5, 0x62, 0xb9, 0x2a, 0xb8, 0x1a, 0x8e, 0xde, 0x48, 0x41,
	0x5b, 0x14, 0x21, 0xdc, 0x42, 0xe7, 0x4b, 0xae, 0xde, 0xdc, 0xa5, 0xac, 0x9a, 0xfc, 0x47, 0xe0,
	0x83, 0x5e, 0xf5, 0x52, 0x98, 0xda, 0x47, 0x74, 0x0c, 0xad, 0xfd, 0x82, 0x9a, 0x7a, 0x51, 0xb3,
	0x74, 0x1d, 0x6b, 0xf4, 0x00, 0xdd, 0xf2, 0x5c, 0xca, 0x41, 0x26, 0xd0, 0x72, 0x73, 0xc1, 0x15,
	0xce, 0x70, 0x59, 0x7b, 0x55, 0x75, 0x52, 0xcb, 0x63, 0x3c, 0xea, 0xeb, 0xcf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x0f, 0xc6, 0x74, 0x29, 0xe0, 0x02, 0x00, 0x00,
}
